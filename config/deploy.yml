# Name of your application. Used to uniquely configure containers.
service: prova

# Name of the container image.
image: paolotax/prova

# Deploy to these servers.
servers:
  web:
    hosts:
      - 116.203.224.90
    labels:
      traefik.http.routers.prova.entrypoints: websecure
      traefik.http.routers.prova.rule: Host("scagnozz.com")
      traefik.http.routers.prova.tls.certresolver: letsencrypt
    options:
      network: "private"
    volumes:
      - /usr/bin/ffmpeg:/usr/bin/ffmpeg
  job:
    hosts:
      - 116.203.224.90
    cmd: bundle exec sidekiq -q default -q mailers -q ahoy
    options:
      network: "private"

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: paolotax

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    DB_HOST: 116.203.224.90
    RAILS_SERVE_STATIC_FILES: true
    RAILS_LOG_TO_STDOUT: true
    REDIS_URL: "redis://prova-redis:6379/0"
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
    - TURNSTILE_SITE_KEY
    - TURNSTILE_SECRET_KEY
    - OPENAI_ACCESS_TOKEN

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
    network: "private"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure # We want to force https
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "paolo.tassinari@hey.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json" # Must match the path in `volume`
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
builder:
  args:
    RUBY_VERSION: 3.2.2
  # secrets:
  #   - GITHUB_TOKEN
  remote:
    arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).

accessories:
  db:
    image: postgres:15
    host: 116.203.224.90
    port: 5432
    env:
      clear:
        POSTGRES_USER: POSTGRES_USER
        POSTGRES_DB: POSTGRES_DB
      secret:
        - POSTGRES_PASSWORD
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
    options:
      network: "private"
  redis:
    image: redis:latest
    host: 116.203.224.90
    directories:
      - data:/data
    options:
      network: "private"


# Configure custom arguments for Traefik
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   interval: 30s
#   max_attempts: 9

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
