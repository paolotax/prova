import e from"@cropper/element";import{CROPPER_SELECTION as t,isElement as s,on as o,EVENT_CHANGE as i,CROPPER_CANVAS as n,CROPPER_IMAGE as a,EVENT_LOAD as r,EVENT_TRANSFORM as c,off as h,CROPPER_VIEWER as l}from"@cropper/utils";var $=":host{display:block;height:100%;overflow:hidden;position:relative;width:100%}";const g=new WeakMap;const m=new WeakMap;const u=new WeakMap;const d="both";const f="horizontal";const S="vertical";const I="none";class CropperViewer extends e{constructor(){super(...arguments);this.$onSelectionChange=null;this.$onSourceImageLoad=null;this.$onSourceImageTransform=null;this.$scale=1;this.$style=$;this.resize=S;this.selection="";this.slottable=false}set $image(e){g.set(this,e)}get $image(){return g.get(this)}set $sourceImage(e){u.set(this,e)}get $sourceImage(){return u.get(this)}set $selection(e){m.set(this,e)}get $selection(){return m.get(this)}static get observedAttributes(){return super.observedAttributes.concat(["resize","selection"])}connectedCallback(){super.connectedCallback();let e=null;e=this.selection?this.ownerDocument.querySelector(this.selection):this.closest(this.$getTagNameOf(t));if(s(e)){this.$selection=e;this.$onSelectionChange=this.$handleSelectionChange.bind(this);o(e,i,this.$onSelectionChange);const t=e.closest(this.$getTagNameOf(n));if(t){const e=t.querySelector(this.$getTagNameOf(a));if(e){this.$sourceImage=e;this.$image=e.cloneNode(true);this.$getShadowRoot().appendChild(this.$image);this.$onSourceImageLoad=this.$handleSourceImageLoad.bind(this);this.$onSourceImageTransform=this.$handleSourceImageTransform.bind(this);o(e.$image,r,this.$onSourceImageLoad);o(e,c,this.$onSourceImageTransform)}}this.$render()}}disconnectedCallback(){const{$selection:e,$sourceImage:t}=this;if(e&&this.$onSelectionChange){h(e,i,this.$onSelectionChange);this.$onSelectionChange=null}if(t&&this.$onSourceImageLoad){h(t.$image,r,this.$onSourceImageLoad);this.$onSourceImageLoad=null}if(t&&this.$onSourceImageTransform){h(t,c,this.$onSourceImageTransform);this.$onSourceImageTransform=null}super.disconnectedCallback()}$handleSelectionChange(e){this.$render(e.detail)}$handleSourceImageLoad(){const{$image:e,$sourceImage:t}=this;const s=e.getAttribute("src");const o=t.getAttribute("src");if(o&&o!==s){e.setAttribute("src",o);e.$ready((()=>{setTimeout((()=>{const{x:e,y:s}=this.$selection;this.$transformImageByOffset(t.$getTransform(),-e,-s)}))}))}}$handleSourceImageTransform(e){const{x:t,y:s}=this.$selection;this.$transformImageByOffset(e.detail.matrix,-t,-s)}$render(e){const{x:t,y:s,width:o,height:i}=e||this.$selection;const n={};const{clientWidth:a,clientHeight:r}=this;let c=a;let h=r;let l=NaN;switch(this.resize){case d:l=1;c=o;h=i;n.width=o;n.height=i;break;case f:l=r/i;c=o*l;n.width=c;break;case S:l=a/o;h=i*l;n.height=h;break;case I:default:a>0?l=a/o:r>0&&(l=r/i)}this.$scale=l;this.$setStyles(n);this.$sourceImage&&this.$transformImageByOffset(this.$sourceImage.$getTransform(),-t,-s)}$transformImageByOffset(e,t,s){const{$image:o,$scale:i,$sourceImage:n}=this;if(n&&o&&i>0){const[n,a,r,c,h,l]=e;const $=(t*c-r*s)/(n*c-r*a);const g=(s-a*$)/c;const m=n*$+r*g+h;const u=a*$+c*g+l;o.$ready((e=>{this.$setStyles.call(o,{width:e.naturalWidth*i,height:e.naturalHeight*i})}));o.$setTransform(n,a,r,c,m*i,u*i)}}}CropperViewer.$name=l;CropperViewer.$version="2.0.0-beta.4";export{d as RESIZE_BOTH,f as RESIZE_HORIZONTAL,I as RESIZE_NONE,S as RESIZE_VERTICAL,CropperViewer as default};

