import e from"@cropper/element";import{CROPPER_GIRD as t}from"@cropper/utils";var r=":host{display:flex;flex-direction:column;position:relative;touch-action:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}:host([bordered]){border:1px dashed var(--theme-color)}:host([covered]){bottom:0;left:0;position:absolute;right:0;top:0}:host>span{display:flex;flex:1}:host>span+span{border-top:1px dashed var(--theme-color)}:host>span>span{flex:1}:host>span>span+span{border-left:1px dashed var(--theme-color)}";class CropperGrid extends e{constructor(){super(...arguments);this.$style=r;this.bordered=false;this.columns=3;this.covered=false;this.rows=3;this.slottable=false;this.themeColor="rgba(238, 238, 238, 0.5)"}static get observedAttributes(){return super.observedAttributes.concat(["bordered","columns","covered","rows"])}$propertyChangedCallback(e,t,r){if(!Object.is(r,t)){super.$propertyChangedCallback(e,t,r);"rows"!==e&&"columns"!==e||this.$render()}}connectedCallback(){super.connectedCallback();this.$render()}$render(){const e=this.$getShadowRoot();const t=document.createDocumentFragment();for(let e=0;e<this.rows;e+=1){const e=document.createElement("span");e.setAttribute("role","row");for(let t=0;t<this.columns;t+=1){const t=document.createElement("span");t.setAttribute("role","gridcell");e.appendChild(t)}t.appendChild(e)}if(e){e.innerHTML="";e.appendChild(t)}}}CropperGrid.$name=t;CropperGrid.$version="2.0.0-beta.4";export{CropperGrid as default};

