kamal app exec -i 'bin/rails console'
kamal app exec -i 'bin/rails runner "Tappa.all.each {|t| if t.giro then t.user = t.giro.user; t.save; end }"'

kamal app exec -i 'bin/rails runner "Adozione.pluck(:stato_adozione).uniq"'
kamal app exec -i 'bin/importmap json'

kamal app exec -i 'bundle exec rake import:new_adozioni'

kamal details

kamal app exec -i --reuse bash

ssh root@116.203.224.90 

docker ps

docker logs -ft container

ssh root@<SERVER_IP>
mkdir -p /letsencrypt && touch /letsencrypt/acme.json && chmod 600 /letsencrypt/acme.json
docker network create -d bridge private

kamal env push

kamal accessory boot db

kamal deploy

kamal setup

kamal deploy

kamal lock release

kamal traefik restart

kamal traefik logs
kamal app logs

rm /opt/homebrew/var/postgresql@14/postmaster.pid && brew services restart postgresql@14

docker exec -i prova-db /usr/bin/pg_dump -U prova prova_production > backup.sql

tar --same-permissions -czvf backup.tar.gz backup.sql

kamal accessory exec -i --reuse -v db "/usr/bin/pg_dump -U prova prova_production" > ~/backup/backup.sql

scp root@116.203.224.90:backup.tar.gz ~/backup/

ssh root@116.203.224.90


docker exec -it prova-web-xxx bin/rails c




User.all.each do |user|
  Current.user = user
  Current.user.libri.each do |libro|
    libro.adozioni_count = Current.user.import_adozioni.da_acquistare.joins(:libro).where(libro: {id: libro.id}).count
    libro.save
  end
end

ImportScuola.find_each do |s|
  s.slug = nil
  s.save
end

EDITOR="code --wait" rails credentials:edit

UserScuola.find_each do |us|
  scu = us.import_scuola
  scu.geocode
  scu.save
end

tappe_con_giro = Tappa.where.not(giro_id: nil).pluck(:id, :giro_id)
tappe_con_giro.each do |t|
  TappaGiro.create!(tappa_id: t[0], giro_id: t[1])
end